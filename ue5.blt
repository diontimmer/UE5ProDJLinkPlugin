{:beat-link-trigger-version "8.0.0",
 :triggers [{:bar true,
             :start "Start",
             :channel 1,
             :start-stop false,
             :note 127,
             :gear false,
             :stop true,
             :expressions {:beat "(when trigger-active?\n  (osc/osc-send (:ue5 @locals) \"/blt/beat\" \n  (float effective-tempo) ;[0]\n  (int beat-within-bar) ;[1]\n  (int bar-number) ;[3]\n  (int beat-number) ;[3]\n  (float pitch-multiplier) ;[4]\n  (str device-name) ;[5]\n  (int device-number) ;[6]\n  (str (boolean looping?)) ;[7]\n  (str (boolean tempo-master?)) ;[8]\n  (str track-title) ;[9]\n  (str track-artist) ;[10]\n  (str track-album) ;[11]\n  (str track-genre) ;[12]\n  (str track-key) ;[13]\n  (str track-label) ;[14]\n  (int track-length) ;[15]\n  (str track-comment) ;[16]\n  (float track-bpm) ;[17]\n  (float track-time-reached) ;[18]\n  (str (boolean mixer?)) ;[19]\n  )\n)\n\n(defonce cue-sent-beat (atom {}))\n\n(when (and (:ue5 @locals) track-time-reached)\n  (swap! cue-sync assoc-in [device-number :lastBeatPacket] beat-number)\n  (when (not= beat-number (get-in @cue-sync [device-number :handledBeat]))\n    (send-cue-names-near-time track-time-reached device-number (:ue5 @locals) 0)\n    (swap! cue-sync assoc-in [device-number :handledBeat] beat-number)))",
                           :setup "(swap! locals assoc :ue5 (osc/osc-client \"localhost\" 9801))",
                           :shutdown "(osc/osc-close (:ue5 @locals))",
                           :tracked "(osc/osc-send (:ue5 @locals) \"/blt/update\" \n  (str (boolean busy?)) ;[0]\n  (str (boolean cued?)) ;[1]\n  (str (boolean paused?)) ;[2]\n  (str (boolean playing?)) ;[3]\n  (str (boolean synced?)) ;[4]\n  (str (boolean at-end?)) ;[5]\n  (int cue-countdown) ;[6]\n  (float effective-tempo) ;[7]\n  (int beat-within-bar) ;[8]\n  (int beat-number) ;[9]\n  (float pitch-multiplier) ;[10]\n  (str device-name) ;[11]\n  (int device-number) ;[12]\n  (str (boolean looping?)) ;[13]\n  (str (boolean tempo-master?)) ;[14]\n  (str track-title) ;[15]\n  (str track-artist) ;[16]\n  (str track-album) ;[17]\n  (str track-genre) ;[18]\n  (str track-key) ;[19]\n  (str track-label) ;[20]\n  (int track-length) ;[21]\n  (str track-comment) ;[22]\n  (float track-bpm) ;[23]\n  (float track-time-reached) ;[24]\n  (str (boolean mixer?)) ;[25]\n  )\n\n(when (and playing? (:ue5 @locals) track-time-reached)\n  (let [lastPkt (get-in @cue-sync [device-number :lastBeatPacket])\n        handled (get-in @cue-sync [device-number :handledBeat])]\n    (when (and (not= beat-number handled)\n               (not= beat-number lastPkt))\n      (let [grid    (.getLatestBeatGridFor beatgrid-finder device-number)\n            started (.getTimeWithinTrack grid beat-number)]\n        (send-cue-names-near-time started device-number (:ue5 @locals) 1)\n        (swap! cue-sync assoc-in [device-number :handledBeat] beat-number)))))",
                           :deactivation ";; Clear record of last beat handled since the player is stopping.\n;; If we restart in this same location, we should evaluate cues again.\n(swap! cue-sync dissoc device-number)"},
             :comment "",
             :outputs #beat_link_trigger.util.MidiChoice{:full-name "2- Focusrite USB MIDI"},
             :send true,
             :players #beat_link_trigger.util.PlayerChoice{:number -1},
             :enabled "Always",
             :message "Note"}],
 :window-positions {:triggers [361 523 982 278],
                    :player-status [922 227],
                    :waveform-detail-1 [876 346 600 200]},
 :expressions {:shared ";; Map: player# -> { cueTimeMs -> [cueName, cueName, ...] }\n(defonce cue-name-times (atom {}))\n\n(defonce cue-sync (atom {}))\n\n(defn find-all-cue-names\n  \"Builds a map of cue start times (ms) -> vector of cue names (strings).\"\n  [^TrackMetadata md]\n  (when md\n    (when-let [cue-list (.getCueList md)]\n      (reduce (fn [m cue]\n                (let [nm (or (.-comment cue) \"\")   ; cue label/name in rekordbox\n                      t  (.-cueTime cue)]\n                  (update m t (fnil conj []) nm)))\n              {} (.-entries cue-list)))))\n\n(def cue-name-indexer\n  (reify org.deepsymmetry.beatlink.data.TrackMetadataListener\n    (metadataChanged [_ md-update]\n      (swap! cue-name-times assoc (.player md-update)\n                                 (find-all-cue-names (.metadata md-update))))))\n\n(defn send-cue-names-near-time\n  \"Send all cue names near time-ms. passPress: 0 = PASSED, 1 = PRESSED.\"\n  [time-ms device-number osc-client passPress]\n  (doseq [[cue-t names]\n          (filter (fn [[t]] (> 50 (Math/abs (- time-ms t))))\n                  (get @cue-name-times device-number))]\n    (doseq [nm names]\n      ;; Schema: [device:int, cue_time_sec:float, passPress:int, cue_name:string]\n      (osc/osc-send osc-client \"/blt/cue\"\n                    (int device-number)\n                    (float (/ cue-t 1000.0))\n                    (int passPress)\n                    nm))))",
               :setup "(.addTrackMetadataListener metadata-finder cue-name-indexer)",
               :shutdown "(.removeTrackMetadataListener metadata-finder cue-name-indexer)"}}
